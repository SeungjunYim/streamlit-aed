import streamlit as st
import networkx as nx

# -----------------------------
# 1. 그래프 정의 (노드/거리)
# -----------------------------
School = nx.Graph()
edges = [
    ("추출배양실", "첨단생명과학실험실1", 4.5*1.5),
    ("추출배양실", "유체역학실험실", 7.6*2),
    ("첨단생명과학실험실1", "생명과학R&E", 4.5*1.5),
    ("생명과학R&E", "생명과학준비실", 4.5),
    ("생명과학준비실", "화학준비실", 4.5),
    ("화학준비실", "첨단생명과학실험실2", 4.5),
    ("첨단생명과학실험실2", "생명과학실험실2", 4.5*1.5),
    ("생명과학실험실2", "생명과학실험실1", 0.2+9),
    ("생명과학실험실1", "신관2층화장실", 0.2+4.5+0.25*9+0.215),
    ("첨단화학실험실1", "화학R&E", 4.5*1.5),
    ("화학R&E", "화학연구실", 4.5*1.5),
    ("화학연구실", "생명과학연구실", 4.5),
    ("생명과학연구실", "첨단화학실험실2", 4.5),
    ("첨단화학실험실2", "화학실험실2", 4.5),
    ("화학실험실2", "화학실험실1", 0.2+9),
    ("화학실험실1", "신관2층화장실", 0.2+4.5+0.25*9+0.215),

    ("신관2층화장실", "신관2층입구", 5.835),
    ("신관2층입구", "본관현관(우측)", 9.335),
    ("본관현관(우측)", "자료보관실", 2.03+2.25),
    ("엘리베이터", "자료보관실", 2.03+2.25),
    ("본관현관(우측)", "엘리베이터", 5*0.45),
    ("본관현관(우측)", "제2교무실", 6.5),
    ("제2교무실", "다목적강의실", 17.37),
    ("자료보관실", "휴게실(여)", 4.5), 
    ("휴게실(여)", "보건실", 4.5),
    ("보건실", "회의실", 4.5),
    ("회의실", "교장실", 15*0.45),
    ("교장실", "본관현관(중앙)", 16*0.45),
    ("본관현관(중앙)", "행정실", 16*0.45),
    ("행정실", "본부교무실", 30*0.45),
    ("본부교무실", "방송실", 25*0.45),
    ("방송실", "스튜디오", 4.5),
    ("스튜디오", "본관현관(좌측)", 5.2),
    ("본관현관(좌측)", "vision class", 4.5),
    ("vision class", "wee class", 4.5),
    
    ("유체역학실험실", "첨단지구과학실험실1", 4.5*1.5),
    ("유체역학실험실", "첨단물리실험실1", 4.5*1.5),
    ("첨단지구과학실험실1", "지구과학R&E", 4.5*1.5),
    ("지구과학R&E", "지구과학준비실", 4.5),
    ("지구과학준비실", "첨단지구과학실험실2", 4.5),
    ("첨단지구과학실험실2", "지구과학실험실2", 4.5),
    ("지구과학실험실2", "지구과학실험실1", 4.5*1.5),
    ("생명과학실험실2", "생명과학실험실1", 0.2+9),
    ("지구과학실험실1", "신관3층화장실", 0.2+4.5+0.25*9+0.215),
    ("첨단물리실험실1", "물리R&E", 4.5*1.5),
    ("물리R&E", "물리연구실", 4.5*1.5),
    ("물리연구실", "지구과학연구실", 4.5),
    ("지구과학연구실", "첨단물리실험실2", 4.5),
    ("첨단물리실험실2", "물리실험실2", 4.5),
    ("물리실험실2", "물리실험실1", 0.2+9),
    ("물리실험실1", "신관3층화장실", 0.2+4.5+0.25*9+0.215),

    ("신관2층화장실", "신관3층화장실", 7.6*2),
    ("신관3층화장실", "강당", 7.6*2),
    ("강당", "예체능연구실", 7.6*2),
    ("강당", "음악실", 7.6*2),

    ("음악실", "과학탐구토론실", 17.37),
    ("과학탐구토론실", "사회연구실", 4.5+2.17),
    ("사회연구실", "동아리실1", 2.17+2.25),
    ("동아리실1", "동아리실2", 4.5),
    ("동아리실2", "3-5 교실", 4.5+2.25),
    ("3-5 교실", "3-4 교실", 9),
    ("3-4 교실", "3힉년 학년교무실", 4.5+0.45*6),
    ("3학년 학년교무실", "3-3 교실", 4.5+0.45*6),
    ("3-3 교실", "3-2 교실", 9),
    ("3-2 교실", "3-1 교실", 9),
    ("3-1 교실", "정보연구실", 0.45*15),
    ("정보연구실", "구정보연구실", 4.5),
    ("구정보연구실", "정보실", 5.2),
    ("정보실", "컴퓨터실", 2.25+4.5),
    ("컴퓨터실", "리만실", 4.5),

    ("정보실", "수학연구실2", 14.4),
    ("영어연구실", "사회연구실", 14.4),
    ("3학년 학년교무실", "2학년 학년교무실", 14.4),

    ("english farm", "english forest", 17.37),
    ("english forest", "영어연구실", 4.5+2.17),
    ("영어연구실", "english ocean", 2.03+2.25),
    ("english ocean", "국어과연구실", 4.5),
    ("국어과연구실", "2-5 교실", 4.5+2.25),
    ("2-5 교실", "2-4 교실", 9),
    ("2-4 교실", "2학년 학년교무실", 4.5+0.45*6),
    ("2학년 학년교무실", "3-3 교실", 4.5+0.45*6),
    ("2-3 교실", "2-2 교실", 9),
    ("2-2 교실", "2-1 교실", 9),
    ("2-1 교실", "유클리드실", 9),
    ("유클리드실", "수학연구실2", 5.2),
    ("수학연구실2", "수학교과교실1", 2.25+4.5),
    ("수학교과교실1", "수학교과교실2", 4.5),

    ("수학연구실2", "수학연구실1", 14.4),
    ("사회연구실", "도서관", 14.4),
    ("2학년 학년교무실", "1학년 학년교무실", 14.4),
    ("1학년 학년교무실", "본관현관(중앙)", 14.4),
    
    ("신관3층화장실", "과학카페", 17*0.45+0.215+(1.87+0.555)/2+0.45*11),
    ("도서관", "입학지원부", 24.5*0.45+0.14),
    ("입학지원부", "입학사정관자료실", 4.5),
    ("입학사정관자료실", "제3교무실", 4.5),
    ("제3교무실", "1-5 교실", 15*0.45),
    ("1-5 교실", "1학년 학년교무실", 4.5+0.45*6),
    ("1학년 학년교무실", "1-4 교실", 4.5+0.45*6),
    ("1-4 교실", "1-3 교실", 9),
    ("1-3 교실", "1-2 교실", 9),
    ("1-2 교실", "1-1 교실", 9),
    ("1-1 교실", "수학연구실1", 5.2),
    ("수학연구실1", "오일러실", 2.25+4.5),
    ("오일러실", "라이프니츠실", 4.5),

    ("수학연구실2", "수학연구실1", 14.4),
    ("사회연구실", "도서관", 14.4),
    ("다목적강의실", "신관2층화장실", 17.37)
]
School.add_weighted_edges_from(edges)

# -----------------------------
# 2. Streamlit UI
# -----------------------------
st.title("🧠 동신과고 AED까지의 최단 경로 탐색")
st.write("학교 공간을 그래프 구조로 모델링하여 AED까지의 최단 경로를 추천합니다.")

start = st.selectbox("📍 현재 위치를 선택하세요", sorted(School.nodes))

aed_locations = ["첨단화학실험실1", "보건실"]
max_cost = 540

if st.button("🚑 AED 추천 경로 탐색하기"):
    min_cost = float('inf')
    best_end = None
    best_path = []

    for end in aed_locations:
        try:
            cost, path = nx.single_source_dijkstra(School, source=start, target=end)
            if cost < min_cost:
                min_cost = cost
                best_end = end
                best_path = path
        except nx.NetworkXNoPath:
            continue

    if best_end is None:
        st.error("⚠️ 도달 가능한 AED가 없습니다.")
    else:
        def path_cost(path):
            return sum(School[path[i]][path[i+1]]['weight'] for i in range(len(path)-1))

        all_paths = list(nx.all_simple_paths(School, source=start, target=best_end))
        valid_paths = [(path, path_cost(path)) for path in all_paths if path_cost(path) <= max_cost]
        valid_paths.sort(key=lambda x: x[1])
        top_2 = valid_paths[:2]

        st.success(f"✅ [{start} → {best_end}]까지 비용 ≤ {max_cost}m인 추천 경로 Top 2:")

        if not top_2:
            st.warning("조건을 만족하는 경로가 없습니다.")
        else:
            for i, (path, cost) in enumerate(top_2, 1):
                st.markdown(f"{i}. 경로: {' → '.join(path)}")
                st.markdown(f"    총 거리: {cost:.2f} m")
